#%%
######################### PACKAGES #######################################
from datetime import datetime, timedelta, date
import requests
import numpy as np

#%%
################################## USED FUCNTION #########################################
def thirty_min_interval(start_date, end_date, interval_minutes):

    diff = end_date - start_date
    number_half_hours = int(diff.days * (48))
    half_hour = timedelta(minutes = interval_minutes)  
    dates_list = []

    for half_hours in range(number_half_hours):
        start_date = start_date + half_hour
        start_date_string = str(start_date)
        start_date_string = start_date_string[:10] + 'T' + start_date_string[11:] + '.432z'
        dates_list.append(start_date_string)

    return dates_list

def get_first_request(initial_url, headers, params, data_list):

    response = requests.get(url=initial_url, headers=headers, params = params)
    print("status_code is", response.status_code)

    return_link = ""
    last_page = ""
    order = ""

    if response.status_code == 200:
        print("data")
        current_elements = response.json()
        data_list.extend(current_elements)

        return_links = [link_pagination.split("; ") for link_pagination in\
                response.headers["Link"].replace("<", "").replace(">", "")\
                .split(", ")]

        return_link = return_links[-1][0][0:-1]
        last_page = int(return_links[-1][0][-1])
        order = return_links[-1][1]

        print('link order is', order)
        print('the last page is', last_page)

    else:
        print('no_data')

    return return_link, last_page, order 

def get_api_data_next_page(next_url, headers, data_list, params = {}):

    response = requests.get(url=next_url, headers=headers, params=params)

    if response.status_code == 200:
        current_elements = response.json()
        data_list.extend(current_elements)

def get_api_data_between_two_dates(initial_url, headers, dates_interval_list):

    data_list = []
    last_page_list = []
    loop = 0
    for days in range(len(dates_interval_list)-1):

        loop =+ loop + 1
        left = len(dates_interval_list) - loop
        print('to go', left)
        start_date = dates_interval_list[days]
        end_date = dates_interval_list[days+1]
        params = {"fromDateTime": start_date, "toDateTime":end_date}

        return_link, last_page, order = get_first_request(initial_url, headers, params, data_list)
        last_page_list.append([last_page,order])
        print('last_page is', last_page)
        try:
            if last_page > 0:
                page_list = np.arange(1,last_page+1)    

                for page in page_list:
                    next_url = return_link + str(page)
                    get_api_data_next_page(next_url, headers, data_list, params = {})
        except:
            print('no data, so no page')

    return data_list

#%%
################################# ALL INTERVALS BETWEEN THE TWO DATES ######################

start_date = datetime(2022, 9, 1)
end_date = datetime(2022, 9, 30)
interval_minutes = 30
dates_interval_list = thirty_min_interval(start_date, end_date, interval_minutes)

#%%
############################## REQUEST DATA FOR API #######################

app_id = "03ca1ed4"
app_key = "faf95b3d7c76b08f74e7f11823033b0f"
accept = "application/json"

initial_url = "https://api.schiphol.nl/smart-energy/measurements"
headers = {"app_id": app_id, "app_key": app_key, "resourceversion": "v1", "accept":accept}


#%%
############################## GET API DATA BETWEEN THE TWO DATES #######################

data_schiphol_api = get_api_data_between_two_dates(initial_url, headers, dates_interval_list)













#%%
################################FUNCTION FOR FIRST REQUEST #########################

last_page_list = []

for days in range(len(dates_interval_list)-1):

    start_date = dates_interval_list[days]
    end_date = dates_interval_list[days+1]
    params = {"fromDateTime": start_date, "toDateTime":end_date}

    return_link, last_page, order = get_first_request(initial_url, headers, params, data_list)
    last_page_list.append([last_page,order])
    print('last_page is', last_page)
    try:
        if last_page > 0:
            page_list = np.arange(1,last_page+1)    

            for page in page_list:
                next_url = return_link + str(page)
                get_api_data_next_page(next_url, headers, data_list, params = {})
    except:
        print('no data, so no page')
    

################################ GET NEXT PAGES IF PRESENT ##########################
#%%
def get_api_data_between_two_dates(initial_url, headers, params, dates_interval_list):

    data_list = []
    last_page_list = []

    for days in range(len(dates_interval_list)-1):

        start_date = dates_interval_list[days]
        end_date = dates_interval_list[days+1]
        params = {"fromDateTime": start_date, "toDateTime":end_date}

        return_link, last_page, order = get_first_request(initial_url, headers, params, data_list)
        last_page_list.append([last_page,order])
        print('last_page is', last_page)
        try:
            if last_page > 0:
                page_list = np.arange(1,last_page+1)    

                for page in page_list:
                    next_url = return_link + str(page)
                    get_api_data_next_page(next_url, headers, data_list, params = {})
        except:
            print('no data, so no page')

    return data_list


#%%

if last_page > 0:
        page_list = np.arange(1,last_page+1)    
        print(page_list)
        for page in page_list:
            next_url = return_link + str(page)
            get_api_data_next_page(next_url, headers, data_list, params = {})















# %%
